{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubscriptionService {\n  constructor(http) {\n    this.http = http;\n    this.apiServerUrl = 'http://localhost:9000';\n    this.token = localStorage.getItem('token');\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.headers2 = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.token}`\n    });\n    this.headers3 = new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`\n    });\n  }\n  subscribe(subscribtion) {\n    return this.http.post(this.apiServerUrl + '/subscription', subscribtion, {\n      headers: this.headers2,\n      responseType: 'text'\n    });\n  }\n  // unsubscribe(): Observable<any> {\n  //   return this.http.post(this.apiServerUrl + '/deleteSubscription' + '/533995d9-3aa3-11ee-8fc9-2cea7f077dd9', {headers: this.headers2, responseType: 'text'});\n  // }\n  unsubscribe() {\n    console.log(this.token);\n    return this.http.post(this.apiServerUrl + '/deleteSubscription/4d20017b-3abe-11ee-8fc9-2cea7f077dd9', {\n      headers: this.headers2,\n      responseType: 'json'\n    });\n  }\n  subscriptionExists(animalId) {\n    console.log(animalId);\n    return this.http.post(this.apiServerUrl + '/subscriptionExists', JSON.stringify(animalId), {\n      headers: this.headers2,\n      responseType: 'text'\n    });\n  }\n}\nSubscriptionService.ɵfac = function SubscriptionService_Factory(t) {\n  return new (t || SubscriptionService)(i0.ɵɵinject(i1.HttpClient));\n};\nSubscriptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SubscriptionService,\n  factory: SubscriptionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","SubscriptionService","constructor","http","apiServerUrl","token","localStorage","getItem","headers","headers2","headers3","subscribe","subscribtion","post","responseType","unsubscribe","console","log","subscriptionExists","animalId","JSON","stringify","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\vanja\\Desktop\\diplomski\\animalAdoption\\animalAdoptionFrontend\\src\\app\\modules\\service\\subscription.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { NewSubscription } from '../model/newSubscription.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubscriptionService {\r\n\r\n  private apiServerUrl = 'http://localhost:9000';\r\n  private token = localStorage.getItem('token')\r\n  headers: HttpHeaders = new HttpHeaders({ 'Content-Type': 'application/json'});\r\n  headers2: HttpHeaders = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': `Bearer ${this.token}`});\r\n  headers3: HttpHeaders = new HttpHeaders({'Authorization': `Bearer ${this.token}`});\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  subscribe(subscribtion : NewSubscription): Observable<any> {\r\n    return this.http.post(this.apiServerUrl + '/subscription', subscribtion, {headers: this.headers2, responseType: 'text'});\r\n  }\r\n\r\n  // unsubscribe(): Observable<any> {\r\n  //   return this.http.post(this.apiServerUrl + '/deleteSubscription' + '/533995d9-3aa3-11ee-8fc9-2cea7f077dd9', {headers: this.headers2, responseType: 'text'});\r\n  // }\r\n\r\n  unsubscribe(): Observable<any> {\r\n    console.log(this.token)\r\n    return this.http.post(this.apiServerUrl + '/deleteSubscription/4d20017b-3abe-11ee-8fc9-2cea7f077dd9' , {headers: this.headers2, responseType: 'json'});\r\n  }\r\n\r\n  subscriptionExists(animalId : string):  Observable<any> {\r\n    console.log(animalId)\r\n    return this.http.post(this.apiServerUrl + '/subscriptionExists', JSON.stringify(animalId), {headers: this.headers2, responseType: 'text'});\r\n  }\r\n\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAA2B,sBAAsB;;;AAOjF,OAAM,MAAOC,mBAAmB;EAQ9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,YAAY,GAAG,uBAAuB;IACtC,KAAAC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,KAAAC,OAAO,GAAgB,IAAIR,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAC,CAAC;IAC7E,KAAAS,QAAQ,GAAgB,IAAIT,WAAW,CAAC;MAAE,cAAc,EAAE,kBAAkB;MAAE,eAAe,EAAE,UAAU,IAAI,CAACK,KAAK;IAAE,CAAC,CAAC;IACvH,KAAAK,QAAQ,GAAgB,IAAIV,WAAW,CAAC;MAAC,eAAe,EAAE,UAAU,IAAI,CAACK,KAAK;IAAE,CAAC,CAAC;EAE1C;EAExCM,SAASA,CAACC,YAA8B;IACtC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,IAAI,CAACT,YAAY,GAAG,eAAe,EAAEQ,YAAY,EAAE;MAACJ,OAAO,EAAE,IAAI,CAACC,QAAQ;MAAEK,YAAY,EAAE;IAAM,CAAC,CAAC;EAC1H;EAEA;EACA;EACA;EAEAC,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAAC;IACvB,OAAO,IAAI,CAACF,IAAI,CAACU,IAAI,CAAC,IAAI,CAACT,YAAY,GAAG,0DAA0D,EAAG;MAACI,OAAO,EAAE,IAAI,CAACC,QAAQ;MAAEK,YAAY,EAAE;IAAM,CAAC,CAAC;EACxJ;EAEAI,kBAAkBA,CAACC,QAAiB;IAClCH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IACrB,OAAO,IAAI,CAAChB,IAAI,CAACU,IAAI,CAAC,IAAI,CAACT,YAAY,GAAG,qBAAqB,EAAEgB,IAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,EAAE;MAACX,OAAO,EAAE,IAAI,CAACC,QAAQ;MAAEK,YAAY,EAAE;IAAM,CAAC,CAAC;EAC5I;;AA1BWb,mBAAmB,C;mBAAnBA,mBAAmB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBxB,mBAAmB,C;SAAnBA,mBAAmB;EAAAyB,OAAA,EAAnBzB,mBAAmB,CAAA0B,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}