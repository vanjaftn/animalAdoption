import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { SafeUrl } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export interface Coord {
    x: number;
    y: number;
}
export declare class NgxImageZoomComponent implements OnInit, OnChanges, OnDestroy {
    private renderer;
    private changeDetectorRef;
    private static readonly validZoomModes;
    zoomContainer: ElementRef;
    imageThumbnail: ElementRef;
    fullSizeImage: ElementRef;
    zoomScroll: EventEmitter<number>;
    zoomPosition: EventEmitter<Coord>;
    imagesLoaded: EventEmitter<boolean>;
    display?: string;
    fullImageTop?: number;
    fullImageLeft?: number;
    magnifiedWidth?: number;
    magnifiedHeight?: number;
    lensTop?: number;
    lensLeft?: number;
    enableLens: boolean;
    lensBorderRadius: number;
    thumbImage?: string | SafeUrl | null;
    fullImage?: string | SafeUrl | null;
    thumbWidth: number;
    thumbHeight: number;
    fullWidth: number;
    fullHeight: number;
    lensWidth: number;
    lensHeight: number;
    private zoomMode;
    private magnification;
    private enableScrollZoom;
    private scrollStepSize;
    private circularLens;
    private baseRatio?;
    private minZoomRatio;
    private maxZoomRatio;
    private xRatio;
    private yRatio;
    private offsetLeft?;
    private offsetTop?;
    private zoomingEnabled;
    private zoomFrozen;
    private isReady;
    private thumbImageLoaded;
    private fullImageLoaded;
    private latestMouseLeft;
    private latestMouseTop;
    private eventListeners;
    constructor(renderer: Renderer2, changeDetectorRef: ChangeDetectorRef);
    set setThumbImage(thumbImage: string | SafeUrl | null);
    set setFullImage(fullImage: string | SafeUrl | null);
    set setZoomMode(zoomMode: string);
    set setMagnification(magnification: number);
    set setMinZoomRatio(minZoomRatio: number);
    set setMaxZoomRatio(maxZoomRatio: number);
    set setScrollStepSize(stepSize: number);
    set setEnableLens(enable: boolean);
    set setLensWidth(width: number);
    set setLensHeight(height: number);
    set setCircularLens(enable: boolean);
    set setEnableScrollZoom(enable: boolean);
    altText: string;
    titleText: string;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    /**
     * Template helper methods
     */
    onThumbImageLoaded(): void;
    onFullImageLoaded(): void;
    private setUpEventListeners;
    private checkImagesLoaded;
    private setIsReady;
    /**
     * Zoom position setters
     */
    private setZoomPosition;
    /**
     * Mouse wheel event
     */
    private onMouseWheel;
    /**
     * Hover mode
     */
    private hoverMouseEnter;
    private hoverMouseLeave;
    private hoverMouseMove;
    /**
     * Toggle mode
     */
    private toggleClick;
    /**
     * Click mode
     */
    private clickStarter;
    private clickMouseLeave;
    private clickMouseMove;
    /**
     * Toggle freeze mode
     */
    private toggleFreezeMouseEnter;
    private hoverFreezeMouseEnter;
    private toggleFreezeMouseLeave;
    private toggleFreezeMouseMove;
    private toggleFreezeClick;
    private hoverFreezeClick;
    /**
     * Private helper methods
     */
    private zoomOn;
    private zoomOff;
    private calculateZoomPosition;
    private calculateImageAndLensPosition;
    private calculateRatioAndOffset;
    private calculateRatio;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxImageZoomComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxImageZoomComponent, "lib-ngx-image-zoom", never, { "setThumbImage": "thumbImage"; "setFullImage": "fullImage"; "setZoomMode": "zoomMode"; "setMagnification": "magnification"; "setMinZoomRatio": "minZoomRatio"; "setMaxZoomRatio": "maxZoomRatio"; "setScrollStepSize": "scrollStepSize"; "setEnableLens": "enableLens"; "setLensWidth": "lensWidth"; "setLensHeight": "lensHeight"; "setCircularLens": "circularLens"; "setEnableScrollZoom": "enableScrollZoom"; "altText": "altText"; "titleText": "titleText"; }, { "zoomScroll": "zoomScroll"; "zoomPosition": "zoomPosition"; "imagesLoaded": "imagesLoaded"; }, never, never, false, never>;
}
