import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewChild, Output, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class NgxImageZoomComponent {
    constructor(renderer, changeDetectorRef) {
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.zoomScroll = new EventEmitter();
        this.zoomPosition = new EventEmitter();
        this.imagesLoaded = new EventEmitter();
        this.enableLens = false;
        this.lensBorderRadius = 0;
        this.thumbWidth = 0;
        this.thumbHeight = 0;
        this.fullWidth = 0;
        this.fullHeight = 0;
        this.lensWidth = 100;
        this.lensHeight = 100;
        this.zoomMode = 'hover';
        this.magnification = 1;
        this.enableScrollZoom = false;
        this.scrollStepSize = 0.1;
        this.circularLens = false;
        this.minZoomRatio = 1;
        this.maxZoomRatio = 2;
        this.xRatio = 0;
        this.yRatio = 0;
        this.zoomingEnabled = false;
        this.zoomFrozen = false;
        this.isReady = false;
        this.thumbImageLoaded = false;
        this.fullImageLoaded = false;
        this.latestMouseLeft = -1;
        this.latestMouseTop = -1;
        this.eventListeners = [];
        this.altText = '';
        this.titleText = '';
    }
    set setThumbImage(thumbImage) {
        this.thumbImageLoaded = false;
        this.setIsReady(false);
        this.thumbImage = thumbImage;
    }
    set setFullImage(fullImage) {
        this.fullImageLoaded = false;
        this.setIsReady(false);
        this.fullImage = fullImage;
    }
    set setZoomMode(zoomMode) {
        if (NgxImageZoomComponent.validZoomModes.some(m => m === zoomMode)) {
            this.zoomMode = zoomMode;
        }
    }
    set setMagnification(magnification) {
        this.magnification = Number(magnification) || this.magnification;
        this.zoomScroll.emit(this.magnification);
    }
    set setMinZoomRatio(minZoomRatio) {
        const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;
        this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);
    }
    set setMaxZoomRatio(maxZoomRatio) {
        this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;
    }
    set setScrollStepSize(stepSize) {
        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
    }
    set setEnableLens(enable) {
        this.enableLens = Boolean(enable);
    }
    set setLensWidth(width) {
        this.lensWidth = Number(width) || this.lensWidth;
    }
    set setLensHeight(height) {
        this.lensHeight = Number(height) || this.lensHeight;
    }
    set setCircularLens(enable) {
        this.circularLens = Boolean(enable);
    }
    set setEnableScrollZoom(enable) {
        this.enableScrollZoom = Boolean(enable);
    }
    ngOnInit() {
        this.setUpEventListeners();
    }
    ngOnChanges() {
        if (this.enableLens) {
            if (this.circularLens) {
                this.lensBorderRadius = this.lensWidth / 2;
            }
            else {
                this.lensBorderRadius = 0;
            }
        }
        this.calculateRatioAndOffset();
        this.calculateImageAndLensPosition();
    }
    ngOnDestroy() {
        this.eventListeners.forEach((destroyFn) => destroyFn());
    }
    /**
     * Template helper methods
     */
    onThumbImageLoaded() {
        this.thumbImageLoaded = true;
        this.checkImagesLoaded();
    }
    onFullImageLoaded() {
        this.fullImageLoaded = true;
        this.checkImagesLoaded();
    }
    setUpEventListeners() {
        const nativeElement = this.zoomContainer.nativeElement;
        switch (this.zoomMode) {
            case 'hover':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.hoverMouseMove(event)));
                break;
            case 'toggle':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)));
                break;
            case 'toggle-click':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'click':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.clickStarter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'toggle-freeze':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseleave', () => this.toggleFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.toggleFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.toggleFreezeClick(event)));
                break;
            case 'hover-freeze':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverFreezeMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.toggleFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.toggleFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.hoverFreezeClick(event)));
                break;
        }
        if (this.enableScrollZoom) {
            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
            this.eventListeners.push(this.renderer.listen(nativeElement, 'mousewheel', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'DOMMouseScroll', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'onmousewheel', (event) => this.onMouseWheel(event)));
        }
        if (this.enableLens && this.circularLens) {
            this.lensBorderRadius = this.lensWidth / 2;
        }
    }
    checkImagesLoaded() {
        this.calculateRatioAndOffset();
        if (this.thumbImageLoaded && this.fullImageLoaded) {
            this.calculateImageAndLensPosition();
            this.setIsReady(true);
        }
    }
    setIsReady(value) {
        this.isReady = value;
        this.imagesLoaded.emit(value);
    }
    /**
     * Zoom position setters
     */
    setZoomPosition(left, top) {
        this.latestMouseLeft = Number(left) || this.latestMouseLeft;
        this.latestMouseTop = Number(top) || this.latestMouseTop;
        const c = {
            x: this.latestMouseLeft,
            y: this.latestMouseTop
        };
        this.zoomPosition.emit(c);
    }
    /**
     * Mouse wheel event
     */
    onMouseWheel(event) {
        // Don't eat events if zooming isn't active
        if (!this.zoomingEnabled || this.zoomFrozen) {
            return;
        }
        event = window.event || event; // old IE
        const direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);
        if (direction > 0) {
            // up
            this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);
        }
        else {
            // down
            this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);
        }
        this.calculateRatio();
        this.calculateZoomPosition(event);
        // Prevent scrolling on page.
        event.returnValue = false; // IE
        if (event.preventDefault) {
            event.preventDefault(); // Chrome & FF
        }
    }
    /**
     * Hover mode
     */
    hoverMouseEnter(event) {
        this.zoomOn(event);
    }
    hoverMouseLeave() {
        this.zoomOff();
    }
    hoverMouseMove(event) {
        this.calculateZoomPosition(event);
    }
    /**
     * Toggle mode
     */
    toggleClick(event) {
        if (this.zoomingEnabled) {
            this.zoomOff();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Click mode
     */
    clickStarter(event) {
        if (this.zoomingEnabled === false) {
            this.zoomOn(event);
        }
    }
    clickMouseLeave() {
        this.zoomOff();
    }
    clickMouseMove(event) {
        if (this.zoomingEnabled) {
            this.calculateZoomPosition(event);
        }
    }
    /**
     * Toggle freeze mode
     */
    toggleFreezeMouseEnter(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    hoverFreezeMouseEnter(event) {
        if (!this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    toggleFreezeMouseLeave() {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOff();
        }
    }
    toggleFreezeMouseMove(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.calculateZoomPosition(event);
        }
    }
    toggleFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
            this.zoomOff();
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
            this.changeDetectorRef.markForCheck();
        }
        else {
            this.zoomOn(event);
        }
    }
    hoverFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
            this.changeDetectorRef.markForCheck();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Private helper methods
     */
    zoomOn(event) {
        if (this.isReady) {
            this.zoomingEnabled = true;
            this.calculateRatioAndOffset();
            this.display = 'block';
            this.calculateZoomPosition(event);
            this.changeDetectorRef.markForCheck();
        }
    }
    zoomOff() {
        this.zoomingEnabled = false;
        this.display = 'none';
        this.changeDetectorRef.markForCheck();
    }
    calculateZoomPosition(event) {
        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
        this.setZoomPosition(newLeft, newTop);
        this.calculateImageAndLensPosition();
        this.changeDetectorRef.markForCheck();
    }
    calculateImageAndLensPosition() {
        let lensLeftMod = 0;
        let lensTopMod = 0;
        if (this.enableLens && this.latestMouseLeft > 0) {
            lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;
            lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;
        }
        this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - lensLeftMod;
        this.fullImageTop = (this.latestMouseTop * -this.yRatio) - lensTopMod;
    }
    calculateRatioAndOffset() {
        this.thumbWidth = this.imageThumbnail.nativeElement.width;
        this.thumbHeight = this.imageThumbnail.nativeElement.height;
        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
        if (!this.enableLens) {
            this.lensWidth = this.thumbWidth;
            this.lensHeight = this.thumbHeight;
            this.lensLeft = 0;
            this.lensTop = 0;
        }
        // getBoundingClientRect() ? https://stackoverflow.com/a/44008873
        this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;
        this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;
        if (this.fullImage === undefined) {
            this.fullImage = this.thumbImage;
        }
        if (this.fullImageLoaded) {
            this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
            this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
            this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));
            // Don't allow zooming to smaller than thumbnail size
            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
            this.calculateRatio();
        }
    }
    calculateRatio() {
        this.magnifiedWidth = (this.fullWidth * this.magnification);
        this.magnifiedHeight = (this.fullHeight * this.magnification);
        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
    }
}
NgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'toggle-click', 'toggle-freeze', 'hover-freeze'];
NgxImageZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxImageZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.3", type: NgxImageZoomComponent, selector: "lib-ngx-image-zoom", inputs: { setThumbImage: ["thumbImage", "setThumbImage"], setFullImage: ["fullImage", "setFullImage"], setZoomMode: ["zoomMode", "setZoomMode"], setMagnification: ["magnification", "setMagnification"], setMinZoomRatio: ["minZoomRatio", "setMinZoomRatio"], setMaxZoomRatio: ["maxZoomRatio", "setMaxZoomRatio"], setScrollStepSize: ["scrollStepSize", "setScrollStepSize"], setEnableLens: ["enableLens", "setEnableLens"], setLensWidth: ["lensWidth", "setLensWidth"], setLensHeight: ["lensHeight", "setLensHeight"], setCircularLens: ["circularLens", "setCircularLens"], setEnableScrollZoom: ["enableScrollZoom", "setEnableScrollZoom"], altText: "altText", titleText: "titleText" }, outputs: { zoomScroll: "zoomScroll", zoomPosition: "zoomPosition", imagesLoaded: "imagesLoaded" }, viewQueries: [{ propertyName: "zoomContainer", first: true, predicate: ["zoomContainer"], descendants: true, static: true }, { propertyName: "imageThumbnail", first: true, predicate: ["imageThumbnail"], descendants: true, static: true }, { propertyName: "fullSizeImage", first: true, predicate: ["fullSizeImage"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.thumbWidth\"\n    [style.height.px]=\"this.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.enableLens\n        }\"\n        [style.display]=\"this.display\"\n        [style.top.px]=\"this.lensTop\"\n        [style.left.px]=\"this.lensLeft\"\n        [style.width.px]=\"this.lensWidth\"\n        [style.height.px]=\"this.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.display\"\n            [style.top.px]=\"this.fullImageTop\"\n            [style.left.px]=\"this.fullImageLeft\"\n            [style.width.px]=\"this.magnifiedWidth\"\n            [style.height.px]=\"this.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-ngx-image-zoom', template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.thumbWidth\"\n    [style.height.px]=\"this.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.enableLens\n        }\"\n        [style.display]=\"this.display\"\n        [style.top.px]=\"this.lensTop\"\n        [style.left.px]=\"this.lensLeft\"\n        [style.width.px]=\"this.lensWidth\"\n        [style.height.px]=\"this.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.display\"\n            [style.top.px]=\"this.fullImageTop\"\n            [style.left.px]=\"this.fullImageLeft\"\n            [style.width.px]=\"this.magnifiedWidth\"\n            [style.height.px]=\"this.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { zoomContainer: [{
                type: ViewChild,
                args: ['zoomContainer', { static: true }]
            }], imageThumbnail: [{
                type: ViewChild,
                args: ['imageThumbnail', { static: true }]
            }], fullSizeImage: [{
                type: ViewChild,
                args: ['fullSizeImage', { static: true }]
            }], zoomScroll: [{
                type: Output
            }], zoomPosition: [{
                type: Output
            }], imagesLoaded: [{
                type: Output
            }], setThumbImage: [{
                type: Input,
                args: ['thumbImage']
            }], setFullImage: [{
                type: Input,
                args: ['fullImage']
            }], setZoomMode: [{
                type: Input,
                args: ['zoomMode']
            }], setMagnification: [{
                type: Input,
                args: ['magnification']
            }], setMinZoomRatio: [{
                type: Input,
                args: ['minZoomRatio']
            }], setMaxZoomRatio: [{
                type: Input,
                args: ['maxZoomRatio']
            }], setScrollStepSize: [{
                type: Input,
                args: ['scrollStepSize']
            }], setEnableLens: [{
                type: Input,
                args: ['enableLens']
            }], setLensWidth: [{
                type: Input,
                args: ['lensWidth']
            }], setLensHeight: [{
                type: Input,
                args: ['lensHeight']
            }], setCircularLens: [{
                type: Input,
                args: ['circularLens']
            }], setEnableScrollZoom: [{
                type: Input,
                args: ['enableScrollZoom']
            }], altText: [{
                type: Input
            }], titleText: [{
                type: Input
            }] } });

class NgxImageZoomModule {
}
NgxImageZoomModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxImageZoomModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomModule, declarations: [NgxImageZoomComponent], imports: [CommonModule], exports: [NgxImageZoomComponent] });
NgxImageZoomModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        NgxImageZoomComponent,
                    ],
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        NgxImageZoomComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of ngx-image-zoom
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxImageZoomComponent, NgxImageZoomModule };
//# sourceMappingURL=ngx-image-zoom.mjs.map
