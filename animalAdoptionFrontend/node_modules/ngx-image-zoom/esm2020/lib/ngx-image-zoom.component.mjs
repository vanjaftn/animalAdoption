import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NgxImageZoomComponent {
    constructor(renderer, changeDetectorRef) {
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.zoomScroll = new EventEmitter();
        this.zoomPosition = new EventEmitter();
        this.imagesLoaded = new EventEmitter();
        this.enableLens = false;
        this.lensBorderRadius = 0;
        this.thumbWidth = 0;
        this.thumbHeight = 0;
        this.fullWidth = 0;
        this.fullHeight = 0;
        this.lensWidth = 100;
        this.lensHeight = 100;
        this.zoomMode = 'hover';
        this.magnification = 1;
        this.enableScrollZoom = false;
        this.scrollStepSize = 0.1;
        this.circularLens = false;
        this.minZoomRatio = 1;
        this.maxZoomRatio = 2;
        this.xRatio = 0;
        this.yRatio = 0;
        this.zoomingEnabled = false;
        this.zoomFrozen = false;
        this.isReady = false;
        this.thumbImageLoaded = false;
        this.fullImageLoaded = false;
        this.latestMouseLeft = -1;
        this.latestMouseTop = -1;
        this.eventListeners = [];
        this.altText = '';
        this.titleText = '';
    }
    set setThumbImage(thumbImage) {
        this.thumbImageLoaded = false;
        this.setIsReady(false);
        this.thumbImage = thumbImage;
    }
    set setFullImage(fullImage) {
        this.fullImageLoaded = false;
        this.setIsReady(false);
        this.fullImage = fullImage;
    }
    set setZoomMode(zoomMode) {
        if (NgxImageZoomComponent.validZoomModes.some(m => m === zoomMode)) {
            this.zoomMode = zoomMode;
        }
    }
    set setMagnification(magnification) {
        this.magnification = Number(magnification) || this.magnification;
        this.zoomScroll.emit(this.magnification);
    }
    set setMinZoomRatio(minZoomRatio) {
        const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;
        this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);
    }
    set setMaxZoomRatio(maxZoomRatio) {
        this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;
    }
    set setScrollStepSize(stepSize) {
        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
    }
    set setEnableLens(enable) {
        this.enableLens = Boolean(enable);
    }
    set setLensWidth(width) {
        this.lensWidth = Number(width) || this.lensWidth;
    }
    set setLensHeight(height) {
        this.lensHeight = Number(height) || this.lensHeight;
    }
    set setCircularLens(enable) {
        this.circularLens = Boolean(enable);
    }
    set setEnableScrollZoom(enable) {
        this.enableScrollZoom = Boolean(enable);
    }
    ngOnInit() {
        this.setUpEventListeners();
    }
    ngOnChanges() {
        if (this.enableLens) {
            if (this.circularLens) {
                this.lensBorderRadius = this.lensWidth / 2;
            }
            else {
                this.lensBorderRadius = 0;
            }
        }
        this.calculateRatioAndOffset();
        this.calculateImageAndLensPosition();
    }
    ngOnDestroy() {
        this.eventListeners.forEach((destroyFn) => destroyFn());
    }
    /**
     * Template helper methods
     */
    onThumbImageLoaded() {
        this.thumbImageLoaded = true;
        this.checkImagesLoaded();
    }
    onFullImageLoaded() {
        this.fullImageLoaded = true;
        this.checkImagesLoaded();
    }
    setUpEventListeners() {
        const nativeElement = this.zoomContainer.nativeElement;
        switch (this.zoomMode) {
            case 'hover':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.hoverMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.hoverMouseMove(event)));
                break;
            case 'toggle':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)));
                break;
            case 'toggle-click':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.toggleClick(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'click':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'click', (event) => this.clickStarter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.clickMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.clickMouseMove(event)));
                break;
            case 'toggle-freeze':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseleave', () => this.toggleFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.toggleFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.toggleFreezeClick(event)));
                break;
            case 'hover-freeze':
                this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.hoverFreezeMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', () => this.toggleFreezeMouseLeave()), this.renderer.listen(nativeElement, 'mousemove', (event) => this.toggleFreezeMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.hoverFreezeClick(event)));
                break;
        }
        if (this.enableScrollZoom) {
            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
            this.eventListeners.push(this.renderer.listen(nativeElement, 'mousewheel', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'DOMMouseScroll', (event) => this.onMouseWheel(event)), this.renderer.listen(nativeElement, 'onmousewheel', (event) => this.onMouseWheel(event)));
        }
        if (this.enableLens && this.circularLens) {
            this.lensBorderRadius = this.lensWidth / 2;
        }
    }
    checkImagesLoaded() {
        this.calculateRatioAndOffset();
        if (this.thumbImageLoaded && this.fullImageLoaded) {
            this.calculateImageAndLensPosition();
            this.setIsReady(true);
        }
    }
    setIsReady(value) {
        this.isReady = value;
        this.imagesLoaded.emit(value);
    }
    /**
     * Zoom position setters
     */
    setZoomPosition(left, top) {
        this.latestMouseLeft = Number(left) || this.latestMouseLeft;
        this.latestMouseTop = Number(top) || this.latestMouseTop;
        const c = {
            x: this.latestMouseLeft,
            y: this.latestMouseTop
        };
        this.zoomPosition.emit(c);
    }
    /**
     * Mouse wheel event
     */
    onMouseWheel(event) {
        // Don't eat events if zooming isn't active
        if (!this.zoomingEnabled || this.zoomFrozen) {
            return;
        }
        event = window.event || event; // old IE
        const direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);
        if (direction > 0) {
            // up
            this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);
        }
        else {
            // down
            this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);
        }
        this.calculateRatio();
        this.calculateZoomPosition(event);
        // Prevent scrolling on page.
        event.returnValue = false; // IE
        if (event.preventDefault) {
            event.preventDefault(); // Chrome & FF
        }
    }
    /**
     * Hover mode
     */
    hoverMouseEnter(event) {
        this.zoomOn(event);
    }
    hoverMouseLeave() {
        this.zoomOff();
    }
    hoverMouseMove(event) {
        this.calculateZoomPosition(event);
    }
    /**
     * Toggle mode
     */
    toggleClick(event) {
        if (this.zoomingEnabled) {
            this.zoomOff();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Click mode
     */
    clickStarter(event) {
        if (this.zoomingEnabled === false) {
            this.zoomOn(event);
        }
    }
    clickMouseLeave() {
        this.zoomOff();
    }
    clickMouseMove(event) {
        if (this.zoomingEnabled) {
            this.calculateZoomPosition(event);
        }
    }
    /**
     * Toggle freeze mode
     */
    toggleFreezeMouseEnter(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    hoverFreezeMouseEnter(event) {
        if (!this.zoomFrozen) {
            this.zoomOn(event);
        }
    }
    toggleFreezeMouseLeave() {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.zoomOff();
        }
    }
    toggleFreezeMouseMove(event) {
        if (this.zoomingEnabled && !this.zoomFrozen) {
            this.calculateZoomPosition(event);
        }
    }
    toggleFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
            this.zoomOff();
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
            this.changeDetectorRef.markForCheck();
        }
        else {
            this.zoomOn(event);
        }
    }
    hoverFreezeClick(event) {
        if (this.zoomingEnabled && this.zoomFrozen) {
            this.zoomFrozen = false;
        }
        else if (this.zoomingEnabled) {
            this.zoomFrozen = true;
            this.changeDetectorRef.markForCheck();
        }
        else {
            this.zoomOn(event);
        }
    }
    /**
     * Private helper methods
     */
    zoomOn(event) {
        if (this.isReady) {
            this.zoomingEnabled = true;
            this.calculateRatioAndOffset();
            this.display = 'block';
            this.calculateZoomPosition(event);
            this.changeDetectorRef.markForCheck();
        }
    }
    zoomOff() {
        this.zoomingEnabled = false;
        this.display = 'none';
        this.changeDetectorRef.markForCheck();
    }
    calculateZoomPosition(event) {
        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
        this.setZoomPosition(newLeft, newTop);
        this.calculateImageAndLensPosition();
        this.changeDetectorRef.markForCheck();
    }
    calculateImageAndLensPosition() {
        let lensLeftMod = 0;
        let lensTopMod = 0;
        if (this.enableLens && this.latestMouseLeft > 0) {
            lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;
            lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;
        }
        this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - lensLeftMod;
        this.fullImageTop = (this.latestMouseTop * -this.yRatio) - lensTopMod;
    }
    calculateRatioAndOffset() {
        this.thumbWidth = this.imageThumbnail.nativeElement.width;
        this.thumbHeight = this.imageThumbnail.nativeElement.height;
        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
        if (!this.enableLens) {
            this.lensWidth = this.thumbWidth;
            this.lensHeight = this.thumbHeight;
            this.lensLeft = 0;
            this.lensTop = 0;
        }
        // getBoundingClientRect() ? https://stackoverflow.com/a/44008873
        this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;
        this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;
        if (this.fullImage === undefined) {
            this.fullImage = this.thumbImage;
        }
        if (this.fullImageLoaded) {
            this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
            this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
            this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));
            // Don't allow zooming to smaller than thumbnail size
            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
            this.calculateRatio();
        }
    }
    calculateRatio() {
        this.magnifiedWidth = (this.fullWidth * this.magnification);
        this.magnifiedHeight = (this.fullHeight * this.magnification);
        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
    }
}
NgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'toggle-click', 'toggle-freeze', 'hover-freeze'];
NgxImageZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxImageZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.3", type: NgxImageZoomComponent, selector: "lib-ngx-image-zoom", inputs: { setThumbImage: ["thumbImage", "setThumbImage"], setFullImage: ["fullImage", "setFullImage"], setZoomMode: ["zoomMode", "setZoomMode"], setMagnification: ["magnification", "setMagnification"], setMinZoomRatio: ["minZoomRatio", "setMinZoomRatio"], setMaxZoomRatio: ["maxZoomRatio", "setMaxZoomRatio"], setScrollStepSize: ["scrollStepSize", "setScrollStepSize"], setEnableLens: ["enableLens", "setEnableLens"], setLensWidth: ["lensWidth", "setLensWidth"], setLensHeight: ["lensHeight", "setLensHeight"], setCircularLens: ["circularLens", "setCircularLens"], setEnableScrollZoom: ["enableScrollZoom", "setEnableScrollZoom"], altText: "altText", titleText: "titleText" }, outputs: { zoomScroll: "zoomScroll", zoomPosition: "zoomPosition", imagesLoaded: "imagesLoaded" }, viewQueries: [{ propertyName: "zoomContainer", first: true, predicate: ["zoomContainer"], descendants: true, static: true }, { propertyName: "imageThumbnail", first: true, predicate: ["imageThumbnail"], descendants: true, static: true }, { propertyName: "fullSizeImage", first: true, predicate: ["fullSizeImage"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.thumbWidth\"\n    [style.height.px]=\"this.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.enableLens\n        }\"\n        [style.display]=\"this.display\"\n        [style.top.px]=\"this.lensTop\"\n        [style.left.px]=\"this.lensLeft\"\n        [style.width.px]=\"this.lensWidth\"\n        [style.height.px]=\"this.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.display\"\n            [style.top.px]=\"this.fullImageTop\"\n            [style.left.px]=\"this.fullImageLeft\"\n            [style.width.px]=\"this.magnifiedWidth\"\n            [style.height.px]=\"this.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-ngx-image-zoom', template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.thumbWidth\"\n    [style.height.px]=\"this.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.enableLens\n        }\"\n        [style.display]=\"this.display\"\n        [style.top.px]=\"this.lensTop\"\n        [style.left.px]=\"this.lensLeft\"\n        [style.width.px]=\"this.lensWidth\"\n        [style.height.px]=\"this.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.display\"\n            [style.top.px]=\"this.fullImageTop\"\n            [style.left.px]=\"this.fullImageLeft\"\n            [style.width.px]=\"this.magnifiedWidth\"\n            [style.height.px]=\"this.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { zoomContainer: [{
                type: ViewChild,
                args: ['zoomContainer', { static: true }]
            }], imageThumbnail: [{
                type: ViewChild,
                args: ['imageThumbnail', { static: true }]
            }], fullSizeImage: [{
                type: ViewChild,
                args: ['fullSizeImage', { static: true }]
            }], zoomScroll: [{
                type: Output
            }], zoomPosition: [{
                type: Output
            }], imagesLoaded: [{
                type: Output
            }], setThumbImage: [{
                type: Input,
                args: ['thumbImage']
            }], setFullImage: [{
                type: Input,
                args: ['fullImage']
            }], setZoomMode: [{
                type: Input,
                args: ['zoomMode']
            }], setMagnification: [{
                type: Input,
                args: ['magnification']
            }], setMinZoomRatio: [{
                type: Input,
                args: ['minZoomRatio']
            }], setMaxZoomRatio: [{
                type: Input,
                args: ['maxZoomRatio']
            }], setScrollStepSize: [{
                type: Input,
                args: ['scrollStepSize']
            }], setEnableLens: [{
                type: Input,
                args: ['enableLens']
            }], setLensWidth: [{
                type: Input,
                args: ['lensWidth']
            }], setLensHeight: [{
                type: Input,
                args: ['lensHeight']
            }], setCircularLens: [{
                type: Input,
                args: ['circularLens']
            }], setEnableScrollZoom: [{
                type: Input,
                args: ['enableScrollZoom']
            }], altText: [{
                type: Input
            }], titleText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLXpvb20uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9uZ3gtaW1hZ2Utem9vbS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi9zcmMvbGliL25neC1pbWFnZS16b29tLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFSCxTQUFTLEVBRVQsWUFBWSxFQUNaLEtBQUssRUFJTCxNQUFNLEVBRU4sU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDOzs7QUFhdkIsTUFBTSxPQUFPLHFCQUFxQjtJQXVEOUIsWUFBb0IsUUFBbUIsRUFBVSxpQkFBb0M7UUFBakUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUEvQzNFLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3hDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUN6QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFTOUMsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFJckIsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBUyxHQUFHLEdBQUcsQ0FBQztRQUNoQixlQUFVLEdBQUcsR0FBRyxDQUFDO1FBRWhCLGFBQVEsR0FBRyxPQUFPLENBQUM7UUFDbkIsa0JBQWEsR0FBRyxDQUFDLENBQUM7UUFDbEIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLG1CQUFjLEdBQUcsR0FBRyxDQUFDO1FBQ3JCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBR3JCLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO1FB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U0FBUzsrQkFDSSxvQkFBb0I7Z0lBUWdCLGFBQWE7c0JBQTFELFNBQVM7dUJBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDRyxjQUFjO3NCQUE1RCxTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDQyxhQUFhO3NCQUExRCxTQUFTO3VCQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBRWxDLFVBQVU7c0JBQW5CLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNO2dCQWlESSxhQUFhO3NCQUR2QixLQUFLO3VCQUFDLFlBQVk7Z0JBUVIsWUFBWTtzQkFEdEIsS0FBSzt1QkFBQyxXQUFXO2dCQVFQLFdBQVc7c0JBRHJCLEtBQUs7dUJBQUMsVUFBVTtnQkFRTixnQkFBZ0I7c0JBRDFCLEtBQUs7dUJBQUMsZUFBZTtnQkFPWCxlQUFlO3NCQUR6QixLQUFLO3VCQUFDLGNBQWM7Z0JBT1YsZUFBZTtzQkFEekIsS0FBSzt1QkFBQyxjQUFjO2dCQU1WLGlCQUFpQjtzQkFEM0IsS0FBSzt1QkFBQyxnQkFBZ0I7Z0JBTVosYUFBYTtzQkFEdkIsS0FBSzt1QkFBQyxZQUFZO2dCQU1SLFlBQVk7c0JBRHRCLEtBQUs7dUJBQUMsV0FBVztnQkFNUCxhQUFhO3NCQUR2QixLQUFLO3VCQUFDLFlBQVk7Z0JBTVIsZUFBZTtzQkFEekIsS0FBSzt1QkFBQyxjQUFjO2dCQU1WLG1CQUFtQjtzQkFEN0IsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBS2hCLE9BQU87c0JBQWYsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgT3V0cHV0LFxuICAgIFJlbmRlcmVyMixcbiAgICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29vcmQge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbGliLW5neC1pbWFnZS16b29tJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmd4LWltYWdlLXpvb20uY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL25neC1pbWFnZS16b29tLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbWFnZVpvb21Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHZhbGlkWm9vbU1vZGVzOiBzdHJpbmdbXSA9IFsnaG92ZXInLCAndG9nZ2xlJywgJ2NsaWNrJywgJ3RvZ2dsZS1jbGljaycsICd0b2dnbGUtZnJlZXplJywgJ2hvdmVyLWZyZWV6ZSddO1xuXG4gICAgQFZpZXdDaGlsZCgnem9vbUNvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIHpvb21Db250YWluZXIgITogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCdpbWFnZVRodW1ibmFpbCcsIHsgc3RhdGljOiB0cnVlIH0pIGltYWdlVGh1bWJuYWlsICE6IEVsZW1lbnRSZWY7XG4gICAgQFZpZXdDaGlsZCgnZnVsbFNpemVJbWFnZScsIHsgc3RhdGljOiB0cnVlIH0pIGZ1bGxTaXplSW1hZ2UgITogRWxlbWVudFJlZjtcblxuICAgIEBPdXRwdXQoKSB6b29tU2Nyb2xsID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gICAgQE91dHB1dCgpIHpvb21Qb3NpdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8Q29vcmQ+KCk7XG4gICAgQE91dHB1dCgpIGltYWdlc0xvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIHB1YmxpYyBkaXNwbGF5Pzogc3RyaW5nO1xuICAgIHB1YmxpYyBmdWxsSW1hZ2VUb3A/OiBudW1iZXI7XG4gICAgcHVibGljIGZ1bGxJbWFnZUxlZnQ/OiBudW1iZXI7XG4gICAgcHVibGljIG1hZ25pZmllZFdpZHRoPzogbnVtYmVyO1xuICAgIHB1YmxpYyBtYWduaWZpZWRIZWlnaHQ/OiBudW1iZXI7XG4gICAgcHVibGljIGxlbnNUb3A/OiBudW1iZXI7XG4gICAgcHVibGljIGxlbnNMZWZ0PzogbnVtYmVyO1xuICAgIHB1YmxpYyBlbmFibGVMZW5zID0gZmFsc2U7XG4gICAgcHVibGljIGxlbnNCb3JkZXJSYWRpdXMgPSAwO1xuXG4gICAgcHVibGljIHRodW1iSW1hZ2U/OiBzdHJpbmcgfCBTYWZlVXJsIHwgbnVsbDtcbiAgICBwdWJsaWMgZnVsbEltYWdlPzogc3RyaW5nIHwgU2FmZVVybCB8IG51bGw7XG4gICAgcHVibGljIHRodW1iV2lkdGggPSAwO1xuICAgIHB1YmxpYyB0aHVtYkhlaWdodCA9IDA7XG4gICAgcHVibGljIGZ1bGxXaWR0aCA9IDA7XG4gICAgcHVibGljIGZ1bGxIZWlnaHQgPSAwO1xuICAgIHB1YmxpYyBsZW5zV2lkdGggPSAxMDA7XG4gICAgcHVibGljIGxlbnNIZWlnaHQgPSAxMDA7XG5cbiAgICBwcml2YXRlIHpvb21Nb2RlID0gJ2hvdmVyJztcbiAgICBwcml2YXRlIG1hZ25pZmljYXRpb24gPSAxO1xuICAgIHByaXZhdGUgZW5hYmxlU2Nyb2xsWm9vbSA9IGZhbHNlO1xuICAgIHByaXZhdGUgc2Nyb2xsU3RlcFNpemUgPSAwLjE7XG4gICAgcHJpdmF0ZSBjaXJjdWxhckxlbnMgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgYmFzZVJhdGlvPzogbnVtYmVyO1xuICAgIHByaXZhdGUgbWluWm9vbVJhdGlvID0gMTtcbiAgICBwcml2YXRlIG1heFpvb21SYXRpbyA9IDI7XG4gICAgcHJpdmF0ZSB4UmF0aW8gPSAwO1xuICAgIHByaXZhdGUgeVJhdGlvID0gMDtcbiAgICBwcml2YXRlIG9mZnNldExlZnQ/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBvZmZzZXRUb3A/OiBudW1iZXI7XG4gICAgcHJpdmF0ZSB6b29taW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgem9vbUZyb3plbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgaXNSZWFkeSA9IGZhbHNlO1xuICAgIHByaXZhdGUgdGh1bWJJbWFnZUxvYWRlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgZnVsbEltYWdlTG9hZGVkID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIGxhdGVzdE1vdXNlTGVmdCA9IC0xO1xuICAgIHByaXZhdGUgbGF0ZXN0TW91c2VUb3AgPSAtMTtcblxuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6ICgoKSA9PiB2b2lkKVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgfVxuXG4gICAgQElucHV0KCd0aHVtYkltYWdlJylcbiAgICBwdWJsaWMgc2V0IHNldFRodW1iSW1hZ2UodGh1bWJJbWFnZTogc3RyaW5nIHwgU2FmZVVybCB8IG51bGwpIHtcbiAgICAgICAgdGhpcy50aHVtYkltYWdlTG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0SXNSZWFkeShmYWxzZSk7XG4gICAgICAgIHRoaXMudGh1bWJJbWFnZSA9IHRodW1iSW1hZ2U7XG4gICAgfVxuXG4gICAgQElucHV0KCdmdWxsSW1hZ2UnKVxuICAgIHB1YmxpYyBzZXQgc2V0RnVsbEltYWdlKGZ1bGxJbWFnZTogc3RyaW5nIHwgU2FmZVVybCB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5mdWxsSW1hZ2VMb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRJc1JlYWR5KGZhbHNlKTtcbiAgICAgICAgdGhpcy5mdWxsSW1hZ2UgPSBmdWxsSW1hZ2U7XG4gICAgfVxuXG4gICAgQElucHV0KCd6b29tTW9kZScpXG4gICAgcHVibGljIHNldCBzZXRab29tTW9kZSh6b29tTW9kZTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChOZ3hJbWFnZVpvb21Db21wb25lbnQudmFsaWRab29tTW9kZXMuc29tZShtID0+IG0gPT09IHpvb21Nb2RlKSkge1xuICAgICAgICAgICAgdGhpcy56b29tTW9kZSA9IHpvb21Nb2RlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KCdtYWduaWZpY2F0aW9uJylcbiAgICBwdWJsaWMgc2V0IHNldE1hZ25pZmljYXRpb24obWFnbmlmaWNhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubWFnbmlmaWNhdGlvbiA9IE51bWJlcihtYWduaWZpY2F0aW9uKSB8fCB0aGlzLm1hZ25pZmljYXRpb247XG4gICAgICAgIHRoaXMuem9vbVNjcm9sbC5lbWl0KHRoaXMubWFnbmlmaWNhdGlvbik7XG4gICAgfVxuXG4gICAgQElucHV0KCdtaW5ab29tUmF0aW8nKVxuICAgIHB1YmxpYyBzZXQgc2V0TWluWm9vbVJhdGlvKG1pblpvb21SYXRpbzogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gTnVtYmVyKG1pblpvb21SYXRpbykgfHwgdGhpcy5taW5ab29tUmF0aW8gfHwgdGhpcy5iYXNlUmF0aW8gfHwgMDtcbiAgICAgICAgdGhpcy5taW5ab29tUmF0aW8gPSBNYXRoLm1heChyYXRpbywgdGhpcy5iYXNlUmF0aW8gfHwgMCk7XG4gICAgfVxuXG4gICAgQElucHV0KCdtYXhab29tUmF0aW8nKVxuICAgIHB1YmxpYyBzZXQgc2V0TWF4Wm9vbVJhdGlvKG1heFpvb21SYXRpbzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubWF4Wm9vbVJhdGlvID0gTnVtYmVyKG1heFpvb21SYXRpbykgfHwgdGhpcy5tYXhab29tUmF0aW87XG4gICAgfVxuXG4gICAgQElucHV0KCdzY3JvbGxTdGVwU2l6ZScpXG4gICAgcHVibGljIHNldCBzZXRTY3JvbGxTdGVwU2l6ZShzdGVwU2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsU3RlcFNpemUgPSBOdW1iZXIoc3RlcFNpemUpIHx8IHRoaXMuc2Nyb2xsU3RlcFNpemU7XG4gICAgfVxuXG4gICAgQElucHV0KCdlbmFibGVMZW5zJylcbiAgICBwdWJsaWMgc2V0IHNldEVuYWJsZUxlbnMoZW5hYmxlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlTGVucyA9IEJvb2xlYW4oZW5hYmxlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoJ2xlbnNXaWR0aCcpXG4gICAgcHVibGljIHNldCBzZXRMZW5zV2lkdGgod2lkdGg6IG51bWJlcikge1xuICAgICAgICB0aGlzLmxlbnNXaWR0aCA9IE51bWJlcih3aWR0aCkgfHwgdGhpcy5sZW5zV2lkdGg7XG4gICAgfVxuXG4gICAgQElucHV0KCdsZW5zSGVpZ2h0JylcbiAgICBwdWJsaWMgc2V0IHNldExlbnNIZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5sZW5zSGVpZ2h0ID0gTnVtYmVyKGhlaWdodCkgfHwgdGhpcy5sZW5zSGVpZ2h0O1xuICAgIH1cblxuICAgIEBJbnB1dCgnY2lyY3VsYXJMZW5zJylcbiAgICBwdWJsaWMgc2V0IHNldENpcmN1bGFyTGVucyhlbmFibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5jaXJjdWxhckxlbnMgPSBCb29sZWFuKGVuYWJsZSk7XG4gICAgfVxuXG4gICAgQElucHV0KCdlbmFibGVTY3JvbGxab29tJylcbiAgICBwdWJsaWMgc2V0IHNldEVuYWJsZVNjcm9sbFpvb20oZW5hYmxlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlU2Nyb2xsWm9vbSA9IEJvb2xlYW4oZW5hYmxlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBhbHRUZXh0ID0gJyc7XG4gICAgQElucHV0KCkgdGl0bGVUZXh0ID0gJyc7XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRVcEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUxlbnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNpcmN1bGFyTGVucykge1xuICAgICAgICAgICAgICAgIHRoaXMubGVuc0JvcmRlclJhZGl1cyA9IHRoaXMubGVuc1dpZHRoIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZW5zQm9yZGVyUmFkaXVzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVJhdGlvQW5kT2Zmc2V0KCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKChkZXN0cm95Rm4pID0+IGRlc3Ryb3lGbigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZW1wbGF0ZSBoZWxwZXIgbWV0aG9kc1xuICAgICAqL1xuICAgIG9uVGh1bWJJbWFnZUxvYWRlZCgpIHtcbiAgICAgICAgdGhpcy50aHVtYkltYWdlTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jaGVja0ltYWdlc0xvYWRlZCgpO1xuICAgIH1cblxuICAgIG9uRnVsbEltYWdlTG9hZGVkKCkge1xuICAgICAgICB0aGlzLmZ1bGxJbWFnZUxvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hlY2tJbWFnZXNMb2FkZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFVwRXZlbnRMaXN0ZW5lcnMoKSB7XG5cbiAgICAgICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IHRoaXMuem9vbUNvbnRhaW5lci5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy56b29tTW9kZSkge1xuICAgICAgICAgICAgY2FzZSAnaG92ZXInOlxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ21vdXNlZW50ZXInLCAoZXZlbnQpID0+IHRoaXMuaG92ZXJNb3VzZUVudGVyKGV2ZW50KSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKG5hdGl2ZUVsZW1lbnQsICdtb3VzZWxlYXZlJywgKCkgPT4gdGhpcy5ob3Zlck1vdXNlTGVhdmUoKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKG5hdGl2ZUVsZW1lbnQsICdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IHRoaXMuaG92ZXJNb3VzZU1vdmUoZXZlbnQpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0b2dnbGUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLnRvZ2dsZUNsaWNrKGV2ZW50KSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndG9nZ2xlLWNsaWNrJzpcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKG5hdGl2ZUVsZW1lbnQsICdjbGljaycsIChldmVudCkgPT4gdGhpcy50b2dnbGVDbGljayhldmVudCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHRoaXMuY2xpY2tNb3VzZUxlYXZlKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2Vtb3ZlJywgKGV2ZW50KSA9PiB0aGlzLmNsaWNrTW91c2VNb3ZlKGV2ZW50KSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLmNsaWNrU3RhcnRlcihldmVudCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHRoaXMuY2xpY2tNb3VzZUxlYXZlKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2Vtb3ZlJywgKGV2ZW50KSA9PiB0aGlzLmNsaWNrTW91c2VNb3ZlKGV2ZW50KSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndG9nZ2xlLWZyZWV6ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHRoaXMudG9nZ2xlRnJlZXplTW91c2VMZWF2ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsIChldmVudCkgPT4gdGhpcy50b2dnbGVGcmVlemVNb3VzZU1vdmUoZXZlbnQpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLnRvZ2dsZUZyZWV6ZUNsaWNrKGV2ZW50KSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG92ZXItZnJlZXplJzpcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKG5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB0aGlzLmhvdmVyRnJlZXplTW91c2VFbnRlcihldmVudCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihuYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHRoaXMudG9nZ2xlRnJlZXplTW91c2VMZWF2ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsIChldmVudCkgPT4gdGhpcy50b2dnbGVGcmVlemVNb3VzZU1vdmUoZXZlbnQpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLmhvdmVyRnJlZXplQ2xpY2soZXZlbnQpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lbmFibGVTY3JvbGxab29tKSB7XG4gICAgICAgICAgICAvLyBDaHJvbWU6ICdtb3VzZXdoZWVsJywgRmlyZWZveDogJ0RPTU1vdXNlU2Nyb2xsJywgSUU6ICdvbm1vdXNld2hlZWwnXG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ21vdXNld2hlZWwnLCAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KSksXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmF0aXZlRWxlbWVudCwgJ0RPTU1vdXNlU2Nyb2xsJywgKGV2ZW50KSA9PiB0aGlzLm9uTW91c2VXaGVlbChldmVudCkpLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKG5hdGl2ZUVsZW1lbnQsICdvbm1vdXNld2hlZWwnLCAoZXZlbnQpID0+IHRoaXMub25Nb3VzZVdoZWVsKGV2ZW50KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lbmFibGVMZW5zICYmIHRoaXMuY2lyY3VsYXJMZW5zKSB7XG4gICAgICAgICAgICB0aGlzLmxlbnNCb3JkZXJSYWRpdXMgPSB0aGlzLmxlbnNXaWR0aCAvIDI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrSW1hZ2VzTG9hZGVkKCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZVJhdGlvQW5kT2Zmc2V0KCk7XG4gICAgICAgIGlmICh0aGlzLnRodW1iSW1hZ2VMb2FkZWQgJiYgdGhpcy5mdWxsSW1hZ2VMb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNSZWFkeSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0SXNSZWFkeSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQuZW1pdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWm9vbSBwb3NpdGlvbiBzZXR0ZXJzXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRab29tUG9zaXRpb24obGVmdDogbnVtYmVyLCB0b3A6IG51bWJlcikge1xuICAgICAgICB0aGlzLmxhdGVzdE1vdXNlTGVmdCA9IE51bWJlcihsZWZ0KSB8fCB0aGlzLmxhdGVzdE1vdXNlTGVmdDtcbiAgICAgICAgdGhpcy5sYXRlc3RNb3VzZVRvcCA9IE51bWJlcih0b3ApIHx8IHRoaXMubGF0ZXN0TW91c2VUb3A7XG5cbiAgICAgICAgY29uc3QgYzogQ29vcmQgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLmxhdGVzdE1vdXNlTGVmdCxcbiAgICAgICAgICAgIHk6IHRoaXMubGF0ZXN0TW91c2VUb3BcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy56b29tUG9zaXRpb24uZW1pdChjKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1vdXNlIHdoZWVsIGV2ZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBvbk1vdXNlV2hlZWwoZXZlbnQ6IGFueSkge1xuICAgICAgICAvLyBEb24ndCBlYXQgZXZlbnRzIGlmIHpvb21pbmcgaXNuJ3QgYWN0aXZlXG4gICAgICAgIGlmICghdGhpcy56b29taW5nRW5hYmxlZCB8fCB0aGlzLnpvb21Gcm96ZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50ID0gd2luZG93LmV2ZW50IHx8IGV2ZW50OyAvLyBvbGQgSUVcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gTWF0aC5tYXgoTWF0aC5taW4oKGV2ZW50LndoZWVsRGVsdGEgfHwgLWV2ZW50LmRldGFpbCksIDEpLCAtMSk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgICAvLyB1cFxuICAgICAgICAgICAgdGhpcy5zZXRNYWduaWZpY2F0aW9uID0gTWF0aC5taW4odGhpcy5tYWduaWZpY2F0aW9uICsgdGhpcy5zY3JvbGxTdGVwU2l6ZSwgdGhpcy5tYXhab29tUmF0aW8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZG93blxuICAgICAgICAgICAgdGhpcy5zZXRNYWduaWZpY2F0aW9uID0gTWF0aC5tYXgodGhpcy5tYWduaWZpY2F0aW9uIC0gdGhpcy5zY3JvbGxTdGVwU2l6ZSwgdGhpcy5taW5ab29tUmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlUmF0aW8oKTtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xuXG4gICAgICAgIC8vIFByZXZlbnQgc2Nyb2xsaW5nIG9uIHBhZ2UuXG4gICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFXG4gICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lICYgRkZcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhvdmVyIG1vZGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGhvdmVyTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBob3Zlck1vdXNlTGVhdmUoKSB7XG4gICAgICAgIHRoaXMuem9vbU9mZigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaG92ZXJNb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBtb2RlXG4gICAgICovXG4gICAgcHJpdmF0ZSB0b2dnbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy56b29tT2ZmKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBtb2RlXG4gICAgICovXG4gICAgcHJpdmF0ZSBjbGlja1N0YXJ0ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuem9vbWluZ0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNsaWNrTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgdGhpcy56b29tT2ZmKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGlja01vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGZyZWV6ZSBtb2RlXG4gICAgICovXG4gICAgcHJpdmF0ZSB0b2dnbGVGcmVlemVNb3VzZUVudGVyKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnpvb21pbmdFbmFibGVkICYmICF0aGlzLnpvb21Gcm96ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuem9vbU9uKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaG92ZXJGcmVlemVNb3VzZUVudGVyKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy56b29tRnJvemVuKSB7XG4gICAgICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZUZyZWV6ZU1vdXNlTGVhdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnpvb21pbmdFbmFibGVkICYmICF0aGlzLnpvb21Gcm96ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuem9vbU9mZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b2dnbGVGcmVlemVNb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuem9vbWluZ0VuYWJsZWQgJiYgIXRoaXMuem9vbUZyb3plbikge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVab29tUG9zaXRpb24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b2dnbGVGcmVlemVDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy56b29taW5nRW5hYmxlZCAmJiB0aGlzLnpvb21Gcm96ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuem9vbUZyb3plbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy56b29tT2ZmKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy56b29taW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy56b29tRnJvemVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnpvb21PbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhvdmVyRnJlZXplQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuem9vbWluZ0VuYWJsZWQgJiYgdGhpcy56b29tRnJvemVuKSB7XG4gICAgICAgICAgICB0aGlzLnpvb21Gcm96ZW4gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnpvb21pbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnpvb21Gcm96ZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuem9vbU9uKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByaXZhdGUgaGVscGVyIG1ldGhvZHNcbiAgICAgKi9cbiAgICBwcml2YXRlIHpvb21PbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc1JlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLnpvb21pbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlUmF0aW9BbmRPZmZzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVpvb21Qb3NpdGlvbihldmVudCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB6b29tT2ZmKCkge1xuICAgICAgICB0aGlzLnpvb21pbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVpvb21Qb3NpdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBjb25zdCBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4oZXZlbnQub2Zmc2V0WCwgdGhpcy50aHVtYldpZHRoKSwgMCk7XG4gICAgICAgIGNvbnN0IG5ld1RvcCA9IE1hdGgubWF4KE1hdGgubWluKGV2ZW50Lm9mZnNldFksIHRoaXMudGh1bWJIZWlnaHQpLCAwKTtcblxuICAgICAgICB0aGlzLnNldFpvb21Qb3NpdGlvbihuZXdMZWZ0LCBuZXdUb3ApO1xuXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb24oKTtcblxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb24oKSB7XG4gICAgICAgIGxldCBsZW5zTGVmdE1vZCA9IDA7XG4gICAgICAgIGxldCBsZW5zVG9wTW9kID0gMDtcblxuICAgICAgICBpZiAodGhpcy5lbmFibGVMZW5zICYmIHRoaXMubGF0ZXN0TW91c2VMZWZ0ID4gMCkge1xuICAgICAgICAgICAgbGVuc0xlZnRNb2QgPSB0aGlzLmxlbnNMZWZ0ID0gdGhpcy5sYXRlc3RNb3VzZUxlZnQgLSB0aGlzLmxlbnNXaWR0aCAvIDI7XG4gICAgICAgICAgICBsZW5zVG9wTW9kID0gdGhpcy5sZW5zVG9wID0gdGhpcy5sYXRlc3RNb3VzZVRvcCAtIHRoaXMubGVuc0hlaWdodCAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZ1bGxJbWFnZUxlZnQgPSAodGhpcy5sYXRlc3RNb3VzZUxlZnQgKiAtdGhpcy54UmF0aW8pIC0gbGVuc0xlZnRNb2Q7XG4gICAgICAgIHRoaXMuZnVsbEltYWdlVG9wID0gKHRoaXMubGF0ZXN0TW91c2VUb3AgKiAtdGhpcy55UmF0aW8pIC0gbGVuc1RvcE1vZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJhdGlvQW5kT2Zmc2V0KCkge1xuICAgICAgICB0aGlzLnRodW1iV2lkdGggPSB0aGlzLmltYWdlVGh1bWJuYWlsLm5hdGl2ZUVsZW1lbnQud2lkdGg7XG4gICAgICAgIHRoaXMudGh1bWJIZWlnaHQgPSB0aGlzLmltYWdlVGh1bWJuYWlsLm5hdGl2ZUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgICAgIC8vIElmIGxlbnMgaXMgZGlzYWJsZWQsIHNldCBsZW5zIHNpemUgdG8gZXF1YWwgdGh1bWIgc2l6ZSBhbmQgcG9zaXRpb24gaXQgb24gdG9wIG9mIHRoZSB0aHVtYlxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlTGVucykge1xuICAgICAgICAgICAgdGhpcy5sZW5zV2lkdGggPSB0aGlzLnRodW1iV2lkdGg7XG4gICAgICAgICAgICB0aGlzLmxlbnNIZWlnaHQgPSB0aGlzLnRodW1iSGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5sZW5zTGVmdCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxlbnNUb3AgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgPyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDQwMDg4NzNcbiAgICAgICAgdGhpcy5vZmZzZXRUb3AgPSB0aGlzLmltYWdlVGh1bWJuYWlsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICB0aGlzLm9mZnNldExlZnQgPSB0aGlzLmltYWdlVGh1bWJuYWlsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblxuICAgICAgICBpZiAodGhpcy5mdWxsSW1hZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mdWxsSW1hZ2UgPSB0aGlzLnRodW1iSW1hZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5mdWxsSW1hZ2VMb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbFdpZHRoID0gdGhpcy5mdWxsU2l6ZUltYWdlLm5hdGl2ZUVsZW1lbnQubmF0dXJhbFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5mdWxsSGVpZ2h0ID0gdGhpcy5mdWxsU2l6ZUltYWdlLm5hdGl2ZUVsZW1lbnQubmF0dXJhbEhlaWdodDtcblxuICAgICAgICAgICAgdGhpcy5iYXNlUmF0aW8gPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAodGhpcy50aHVtYldpZHRoIC8gdGhpcy5mdWxsV2lkdGgpLFxuICAgICAgICAgICAgICAgICh0aGlzLnRodW1iSGVpZ2h0IC8gdGhpcy5mdWxsSGVpZ2h0KSk7XG5cbiAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHpvb21pbmcgdG8gc21hbGxlciB0aGFuIHRodW1ibmFpbCBzaXplXG4gICAgICAgICAgICB0aGlzLm1pblpvb21SYXRpbyA9IE1hdGgubWF4KHRoaXMubWluWm9vbVJhdGlvIHx8IDAsIHRoaXMuYmFzZVJhdGlvIHx8IDApO1xuXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVJhdGlvKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJhdGlvKCkge1xuICAgICAgICB0aGlzLm1hZ25pZmllZFdpZHRoID0gKHRoaXMuZnVsbFdpZHRoICogdGhpcy5tYWduaWZpY2F0aW9uKTtcbiAgICAgICAgdGhpcy5tYWduaWZpZWRIZWlnaHQgPSAodGhpcy5mdWxsSGVpZ2h0ICogdGhpcy5tYWduaWZpY2F0aW9uKTtcblxuICAgICAgICB0aGlzLnhSYXRpbyA9ICh0aGlzLm1hZ25pZmllZFdpZHRoIC0gdGhpcy50aHVtYldpZHRoKSAvIHRoaXMudGh1bWJXaWR0aDtcbiAgICAgICAgdGhpcy55UmF0aW8gPSAodGhpcy5tYWduaWZpZWRIZWlnaHQgLSB0aGlzLnRodW1iSGVpZ2h0KSAvIHRoaXMudGh1bWJIZWlnaHQ7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgICN6b29tQ29udGFpbmVyXG4gICAgY2xhc3M9XCJuZ3hJbWFnZVpvb21Db250YWluZXJcIlxuICAgIFtzdHlsZS53aWR0aC5weF09XCJ0aGlzLnRodW1iV2lkdGhcIlxuICAgIFtzdHlsZS5oZWlnaHQucHhdPVwidGhpcy50aHVtYkhlaWdodFwiXG4+XG4gICAgPGltZ1xuICAgICAgICAjaW1hZ2VUaHVtYm5haWxcbiAgICAgICAgY2xhc3M9XCJuZ3hJbWFnZVpvb21UaHVtYm5haWxcIlxuICAgICAgICBbYWx0XT1cImFsdFRleHRcIlxuICAgICAgICBbdGl0bGVdPVwidGl0bGVUZXh0XCJcbiAgICAgICAgW3NyY109XCJ0aHVtYkltYWdlXCJcbiAgICAgICAgKGxvYWQpPVwib25UaHVtYkltYWdlTG9hZGVkKClcIlxuICAgIC8+XG5cbiAgICA8ZGl2XG4gICAgICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgICAgIG5neEltYWdlWm9vbUZ1bGxDb250YWluZXI6IHRydWUsXG4gICAgICAgICAgICBuZ3hJbWFnZVpvb21MZW5zRW5hYmxlZDogdGhpcy5lbmFibGVMZW5zXG4gICAgICAgIH1cIlxuICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJ0aGlzLmRpc3BsYXlcIlxuICAgICAgICBbc3R5bGUudG9wLnB4XT1cInRoaXMubGVuc1RvcFwiXG4gICAgICAgIFtzdHlsZS5sZWZ0LnB4XT1cInRoaXMubGVuc0xlZnRcIlxuICAgICAgICBbc3R5bGUud2lkdGgucHhdPVwidGhpcy5sZW5zV2lkdGhcIlxuICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cInRoaXMubGVuc0hlaWdodFwiXG4gICAgICAgIFtzdHlsZS5ib3JkZXItcmFkaXVzLnB4XT1cInRoaXMubGVuc0JvcmRlclJhZGl1c1wiXG4gICAgPlxuICAgICAgICA8aW1nXG4gICAgICAgICAgICAjZnVsbFNpemVJbWFnZVxuICAgICAgICAgICAgY2xhc3M9XCJuZ3hJbWFnZVpvb21GdWxsXCJcbiAgICAgICAgICAgIFthbHRdPVwiYWx0VGV4dFwiXG4gICAgICAgICAgICBbdGl0bGVdPVwidGl0bGVUZXh0XCJcbiAgICAgICAgICAgIFtzcmNdPVwiZnVsbEltYWdlXCJcbiAgICAgICAgICAgIChsb2FkKT1cIm9uRnVsbEltYWdlTG9hZGVkKClcIlxuICAgICAgICAgICAgW3N0eWxlLmRpc3BsYXldPVwidGhpcy5kaXNwbGF5XCJcbiAgICAgICAgICAgIFtzdHlsZS50b3AucHhdPVwidGhpcy5mdWxsSW1hZ2VUb3BcIlxuICAgICAgICAgICAgW3N0eWxlLmxlZnQucHhdPVwidGhpcy5mdWxsSW1hZ2VMZWZ0XCJcbiAgICAgICAgICAgIFtzdHlsZS53aWR0aC5weF09XCJ0aGlzLm1hZ25pZmllZFdpZHRoXCJcbiAgICAgICAgICAgIFtzdHlsZS5oZWlnaHQucHhdPVwidGhpcy5tYWduaWZpZWRIZWlnaHRcIlxuICAgICAgICAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iXX0=